/**
 * DO NOT EDIT
 *
 * This file was automatically generated by
 *   https://github.com/Polymer/tools/tree/master/packages/gen-typescript-declarations
 *
 * To modify these typings, edit the source file(s):
 *   api-url-params-custom-input.js
 */


// tslint:disable:variable-name Describing an API that's defined elsewhere.
// tslint:disable:no-any describes the API as best we are able today

import {PolymerElement} from '@polymer/polymer/polymer-element.js';

import {html} from '@polymer/polymer/lib/utils/html-tag.js';

import {IronValidatableBehavior} from '@polymer/iron-validatable-behavior/iron-validatable-behavior.js';

import {mixinBehaviors} from '@polymer/polymer/lib/legacy/class.js';

declare namespace ApiElements {

  /**
   * Renders custom query parameter property input.
   *
   * Styling
   *
   * Custom property | Description | Default
   * ----------------|-------------|----------
   * `--api-url-params-custom-input` | Mixin applied to this element | `{}`
   * `--api-request-parameters-editor-row` | Mixin applied to custom parameter form row | `{}`
   * `--api-request-parameters-editor-row-narrow` | Mixin applied to custom parameter form row when narrow | `{}`
   *
   * You can also style inputs as defined in
   * [api-property-form-item](https://github.com/advanced-rest-client/api-property-form-item)
   * element documentation.
   */
  class ApiUrlParamsCustomInput {

    /**
     * View model to use to render the form.
     * See `api-url-params-editor` element for more information.
     */
    model: any[]|null|undefined;

    /**
     * Name of this custom control
     */
    name: string|null|undefined;

    /**
     * Value of the control
     */
    value: string|null|undefined;

    /**
     * The form can display query or URI parameters. When anything change in the form
     * it will send a corresponding custom event (`query-parameter-changed` or
     * `uri-parameter-changed`). To make this happen set the value of this property to
     * either `query` or `uri`.
     */
    required: boolean|null|undefined;

    /**
     * If set it renders a narrow layout
     */
    narrow: boolean|null|undefined;

    /**
     * attribute automatically, which should be used for styling.
     */
    _getValidity(): any;

    /**
     * Computes css class name for narrow layout
     *
     * @param narrow Value of the `narrow` property.
     * @returns Class definition.
     */
    _computeNarrowClass(narrow: Boolean|null): String|null;
  }
}

declare global {

  interface HTMLElementTagNameMap {
    "api-url-params-custom-input": ApiElements.ApiUrlParamsCustomInput;
  }
}

export {};
