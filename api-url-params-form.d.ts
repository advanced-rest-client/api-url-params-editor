/**
 * DO NOT EDIT
 *
 * This file was automatically generated by
 *   https://github.com/Polymer/tools/tree/master/packages/gen-typescript-declarations
 *
 * To modify these typings, edit the source file(s):
 *   api-url-params-form.js
 */


// tslint:disable:variable-name Describing an API that's defined elsewhere.
// tslint:disable:no-any describes the API as best we are able today

import {html, css, LitElement} from 'lit-element';

import {ValidatableMixin} from '@anypoint-web-components/validatable-mixin/validatable-mixin.js';

import {ApiFormMixin} from '@api-components/api-form-mixin/api-form-mixin.js';

declare namespace ApiElements {

  /**
   * Renders form and input elements for query / uri model.
   *
   * Handles creation of form elements, validation, and rendering documentation.
   *
   * This element **requires** you to set `form-type` attribute to either
   * `uri` or `query` to distinguish type of form. Also, set `form-title`
   * property to render a title. It is useful when adding two forms right after
   * each other.
   *
   * ## Optional parameters
   *
   * By default the element renders all form valus. For better user experience,
   * set `allow-hide-optional` attribute to hide parameters that are optional.
   * It also renders checkbox to toggle optional parameters.
   *
   * You can also style inputs as defined in
   * [api-property-form-item](https://github.com/advanced-rest-client/api-property-form-item)
   * element documentation.
   */
  class ApiUrlParamsForm extends
    ValidatableMixin(
    ApiFormMixin(
    Object)) {
    legacy: boolean|null|undefined;

    /**
     * Prohibits rendering of the documentation (the icon and the
     * description).
     */
    noDocs: boolean|null|undefined;

    /**
     * Enables compatibility with Anypoint components.
     */
    compatibility: boolean|null|undefined;

    /**
     * Enables Material Design outlined style
     */
    outlined: boolean|null|undefined;

    /**
     * When set the editor is in read only mode.
     */
    readOnly: boolean|null|undefined;

    /**
     * When set all controls are disabled in the form
     */
    disabled: boolean|null|undefined;

    /**
     * If set it renders a narrow layout
     */
    narrow: boolean|null|undefined;

    /**
     * When set, renders add custom parameter button in query parameters
     * form
     */
    allowCustom: boolean|null|undefined;
    _customInputTemplate(item: any, index: any): any;
    _formRowTemplate(item: any, index: any): any;
    render(): any;

    /**
     * Computes documentation as a markdown to be placed in the `marked-element`
     *
     * @param item View model
     */
    _computeDocumentation(item: object|null): String|null;

    /**
     * Computes if model item has documentation to display.
     *
     * @param noDocs If set it always cancels docs
     * @param item Model item
     * @returns True if documentation can be rendered.
     */
    _computeHasDocumentation(noDocs: Boolean|null, item: object|null): Boolean|null;

    /**
     * Adds custom property to the list.
     */
    add(): void;

    /**
     * attribute automatically, which should be used for styling.
     */
    _getValidity(): any;
    _optionalHanlder(e: any): void;
    _enableCheckedHandler(e: any): void;
    _nameChangeHandler(e: any): void;
    _valueChangeHandler(e: any): void;
    _notifyChange(index: any, property: any, value: any, oldValue: any): void;
    _toggleItemDocs(e: any): void;

    /**
     * Overrides `ApiFormMixin._removeCustom`.
     * Calls the super method and dispatches `delete` event.
     */
    _removeCustom(e: Event|null): void;
  }
}

declare global {

  interface HTMLElementTagNameMap {
    "api-url-params-form": ApiElements.ApiUrlParamsForm;
  }
}
